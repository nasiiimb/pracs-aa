package model.figureModels;

import gui.Window;
import main.*;
import model.Model;
import model.figures.Triangle;

import java.awt.*;
import java.util.ArrayList;


/**
 * Generates a fractal made of triangles, where those are made of smaller triangles.
 * This fractal is known as Sierpinski Triangle.
 */
public class SierpinskiModel
{
    public static int THREADS = 3;

    private final Controller controller;
    private final ArrayList<Object> polygons;
    private boolean cancel;

    private static final Object lock = new Object();

    public SierpinskiModel(Controller controller, int depth)
    {
        this.controller = controller;
        this.polygons = new ArrayList<>();
        this.cancel = false;

        Point p1 = new Point(Window.WIDTH / 2, 60);
        Point p2 = new Point(20, Window.WIDTH - 60);
        Point p3 = new Point(Window.WIDTH-20, Window.WIDTH - 60);

        Point mid1 = new Point((p1.x + p2.x) / 2, (p1.y + p2.y) / 2);
        Point mid2 = new Point((p2.x + p3.x) / 2, (p2.y + p3.y) / 2);
        Point mid3 = new Point((p3.x + p1.x) / 2, (p3.y + p1.y) / 2);

        new SierpinskiModelThread(p1, mid1, mid3, depth-1);
        new SierpinskiModelThread(mid1, p2, mid2, depth-1);
        new SierpinskiModelThread(mid3, mid2, p3, depth-1);
    }


    /**
     * Stops the model.
     */
    public void stopModel() { this.cancel = true; }


    /**
     * Returns the current polygons generated by the model.
     */
    public ArrayList<Object> getPolygons() { return polygons; }


    /**
     * Independent thread that processes one given part of the total model.
     */
    private class SierpinskiModelThread extends Thread
    {
        private final Point p1, p2, p3;
        private final int depth;

        public SierpinskiModelThread(Point p1, Point p2, Point p3, int depth)
        {
            this.p1 = p1;
            this.p2 = p2;
            this.p3 = p3;
            this.depth = depth;

            this.start();
        }

        @Override
        public void run()
        {
            generateTriangles(p1, p2, p3, depth);
            controller.notify(Notify.PROCESS_FINISHED);
        }

        private void generateTriangles(Point p1, Point p2, Point p3, int depth)
        {
            if (cancel) return;

            try { sleep(Model.SLEEP_TIME); }
            catch (InterruptedException e) { e.printStackTrace(); }

            if (depth == 0)
            {
                Triangle triangle = new Triangle(p1, p2, p3);
                synchronized (lock)
                {
                    polygons.add(triangle);
                    controller.notify(Notify.PAINT);
                }
                return;
            }

            Point mid1 = new Point((p1.x + p2.x)/2, (p1.y + p2.y)/2);
            Point mid2 = new Point((p2.x + p3.x)/2, (p2.y + p3.y)/2);
            Point mid3 = new Point((p3.x + p1.x)/2, (p3.y + p1.y)/2);

            generateTriangles(p1, mid1, mid3, depth-1);
            generateTriangles(mid1, p2, mid2, depth-1);
            generateTriangles(mid3, mid2, p3, depth-1);
        }
    }
}
