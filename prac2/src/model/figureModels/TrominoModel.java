package model.figureModels;

import gui.Window;
import main.*;
import model.Model;
import model.figures.Square;
import model.figures.Tromino;

import java.awt.*;
import java.util.ArrayList;


/**
 * Given a NxN board with a missing tile, fills it with Tromino figures.
 */
public class TrominoModel
{
    public static int THREADS = 4;

    private final Controller controller;
    private final ArrayList<Object> polygons;
    private boolean cancel;

    private static final Object lock = new Object();

    private int num;
    private final int arr[];
    private final int size;
    private final int boardSize;
    private final Color colors[] = {Color.BLUE, Color.CYAN, Color.GREEN, Color.RED, Color.YELLOW,
                                    Color.PINK, Color.ORANGE, Color.MAGENTA, Color.LIGHT_GRAY};

    public TrominoModel(Controller controller, int depth)
    {
        this.controller = controller;
        this.polygons = new ArrayList<>();
        this.cancel = false;

        boardSize = (int) Math.pow(2, depth);
        size = Window.WIDTH / boardSize;
        arr = new int[boardSize*boardSize];
        num = 0;
    }

    private Square square;

    public void start(int x, int y)
    {
        int row = x/size;
        int column = y/size;

        arr[row*boardSize+column] = -1;
        Square square = new Square(new Point(row*size, column*size), size, Color.BLACK);
        polygons.add(square);


        int N = boardSize/2;

        /*    ■  */
        /*  ■ ■  */
        if (row < N && column < N)
            placeTromino(N, N-1,
                        N-1, N,
                        N, N);

        /*  ■    */
        /*  ■ ■  */
        else if (row >= N && column < N)
            placeTromino(N-1, N-1,
                        N-1, N,
                        N, N);

        /*  ■ ■  */
        /*    ■  */
        else if (row < N && column >= N)
            placeTromino(N-1, N-1,
                        N, N-1,
                        N, N);

        /*  ■ ■  */
        /*  ■    */
        else if (row >= N && column >= N)
            placeTromino(N-1, N-1,
                        N, N-1,
                        N-1, N);

        new TrominoModelThread(N, 0, 0);
        new TrominoModelThread(N, N, 0);
        new TrominoModelThread(N, 0, N);
        new TrominoModelThread(N, N, N);
    }


    /**
     * Stops the model.
     */
    public void stopModel() { this.cancel = true; }


    /**
     * Returns the current polygons generated by the model.
     */
    public ArrayList<Object> getPolygons() { return polygons; }


    /**
     * Places a tromino in the given position of its squares.
     */
    private void placeTromino(int x1, int y1, int x2, int y2, int x3, int y3)
    {
        Tromino tromino = new Tromino();
        synchronized (lock)
        {
            num++;

            arr[x1*boardSize+y1] = num;
            tromino.add(new Square(new Point(x1*size, y1*size), size, colors[num%colors.length]));
            arr[x2*boardSize+y2] = num;
            tromino.add(new Square(new Point(x2*size, y2*size), size, colors[num%colors.length]));
            arr[x3*boardSize+y3] = num;
            tromino.add(new Square(new Point(x3*size, y3*size), size, colors[num%colors.length]));

            polygons.add(tromino);
            controller.notify(Notify.PAINT);
        }
    }


    /**
     * Independent thread that processes one given part of the total model.
     */
    private class TrominoModelThread extends Thread
    {
        private final int depth;
        private final int x;
        private final int y;

        public TrominoModelThread(int depth, int x, int y)
        {
            this.depth = depth;
            this.x = x;
            this.y = y;

            this.start();
        }

        @Override
        public void run()
        {
            generateTrominos(depth, x, y);
            controller.notify(Notify.PROCESS_FINISHED);
        }


        private void generateTrominos(int depth, int x, int y)
        {
            if (cancel) return;

            try { sleep(Model.SLEEP_TIME); }
            catch (InterruptedException e) { e.printStackTrace(); }

            if (depth == 2)
            {
                Tromino tromino = new Tromino();
                synchronized (lock)
                {
                    ++num;
                    for (int i = 0; i < depth; i++)
                    {
                        for (int j = 0; j < depth; j++)
                        {
                            if (arr[(x+j) * boardSize+(y+i)] == 0)
                            {
                                arr[(x+j) * boardSize+(y+i)] = num;
                                tromino.add(new Square(new Point((x+j) * size, (y+i) * size), size, colors[num%colors.length]));
                            }
                        }
                    }
                    polygons.add(tromino);
                    controller.notify(Notify.PAINT);
                }
                return;
            }

            int row = 0, column = 0;
            for (int i = x; i < x + depth; i++)
            {
                for (int j = y; j < y + depth; j++)
                {
                    if (arr[i*boardSize+j] != 0)
                    {
                        row = i;
                        column = j;
                    }
                }
            }
            
            int N = depth/2;

            /*    ■  */
            /*  ■ ■  */
            if (row < x + N && column < y + N)
                placeTromino(  x + N, y + (N) - 1,
                        x + N - 1, y + N,
                        x + N, y + N);

            /*  ■    */
            /*  ■ ■  */
            else if (row >= x + N && column < y + N)
                placeTromino(  x + (N) - 1, y + (N) - 1,
                        x + (N) - 1, y + (N),
                        x + (N), y + N);

            /*  ■ ■  */
            /*    ■  */
            else if (row < x + N && column >= y + N)
                placeTromino(  x + N - 1, y + N - 1,
                        x + N, y + (N) - 1,
                        x + N, y + N);

            /*  ■ ■  */
            /*  ■    */
            else if (row >= x + N && column >= y + N)
                placeTromino(  x + (N) - 1, y + (N) - 1,
                        x + (N), y + (N) - 1,
                        x + (N) - 1, y + (N));


            generateTrominos(N, x, y);
            generateTrominos(N, x + N, y);
            generateTrominos(N, x, y + N);
            generateTrominos(N, x + N, y + N);
        }
    }
}
