package model.figureModels;

import gui.Window;
import main.*;
import model.Model;
import model.figures.Square;

import java.awt.*;
import java.util.ArrayList;


/**
 * Generates a fractal made of squares, where the new ones are born from its corners.
 */
public class SquareModel
{
    public static int THREADS = 4;

    private final Controller controller;
    private final ArrayList<Object> polygons;
    private boolean cancel;

    private static final Object lock = new Object();

    private final Color colors[] = {Color.BLUE, Color.CYAN, Color.GREEN, Color.RED, Color.YELLOW,
                                    Color.PINK, Color.ORANGE, Color.MAGENTA, Color.LIGHT_GRAY};

    public SquareModel(Controller controller, int depth)
    {
        this.controller = controller;
        this.polygons = new ArrayList<>();
        this.cancel = false;

        int size = Window.WIDTH/3;

        Point topLeft = new Point(Window.WIDTH/2 - size/2, Window.BOARD_HEIGHT/2 - size/2);
        Point topRight = new Point(Window.WIDTH/2 + size/2, Window.BOARD_HEIGHT/2 - size/2);
        Point bottomLeft = new Point(Window.WIDTH/2 - size/2, Window.BOARD_HEIGHT/2 + size/2);
        Point bottomRight = new Point(Window.WIDTH/2 + size/2, Window.BOARD_HEIGHT/2 + size/2);

        Square square = new Square(topLeft, size, colors[depth%colors.length]);
        polygons.add(square);
        controller.notify(Notify.PAINT);

        new SquareModelThread(topLeft, size/2, depth-1);
        new SquareModelThread(topRight, size/2, depth-1);
        new SquareModelThread(bottomLeft, size/2, depth-1);
        new SquareModelThread(bottomRight, size/2, depth-1);
    }


    /**
     * Stops the model.
     */
    public void stopModel() { this.cancel = true; }


    /**
     * Returns the current polygons generated by the model.
     */
    public ArrayList<Object> getPolygons() { return polygons; }


    /**
     * Independent thread that processes one given part of the total model.
     */
    private class SquareModelThread extends Thread
    {
        private final Point topLeft;
        private final int size;
        private final int depth;

        public SquareModelThread(Point topLeft, int size, int depth)
        {
            this.topLeft = topLeft;
            this.size = size;
            this.depth = depth;

            this.start();
        }

        @Override
        public void run()
        {
            generateSquares(topLeft, size, depth);
            controller.notify(Notify.PROCESS_FINISHED);
        }

        private void generateSquares(Point center, int size, int depth)
        {
            if (cancel) return;

            Point topLeft = new Point(center.x - size/2, center.y - size/2);
            Square square = new Square(topLeft, size, colors[depth%colors.length]);
            synchronized (lock)
            {
                polygons.add(square);
                controller.notify(Notify.PAINT);
            }

            try { sleep(Model.SLEEP_TIME); }
            catch (InterruptedException e) { e.printStackTrace(); }

            if (depth == 0) return;

            int nextSize = size/2;
            Point[] nextCenters = new Point[]
            {
                new Point(center.x - nextSize, center.y - nextSize),
                new Point(center.x + nextSize, center.y - nextSize),
                new Point(center.x + nextSize, center.y + nextSize),
                new Point(center.x - nextSize, center.y + nextSize)
            };

            for (Point nextCenter : nextCenters)
                generateSquares(nextCenter, nextSize, depth-1);
        }
    }
}
