package model;

import main.*;
import model.figureModels.*;

import java.util.ArrayList;


/**
 * Handler of the different models available.
 */
public class Model implements Notify
{
    public static int SLEEP_TIME = 50;

    private final Controller controller;

    private int depth;
    private String figure;
    private Object model;
    private boolean running;

    public Model(Controller controller)
    {
        this.controller = controller;
        depth = 4;
        figure = Notify.TROMINO;
        model = null;
        running = false;
    }


    public void setDepth(int depth) { this.depth = depth; }

    public void setFigure(String figure) { this.figure = figure; }

    public Object getModel() { return model; }

    public boolean isRunning() { return running; }


    /**
     * Returns the polygons generated by the running model.
     */
    public ArrayList<Object> getPolygons()
    {
        if (model instanceof TrominoModel trominoModel)
            return trominoModel.getPolygons();

        if (model instanceof SquareModel squareModel)
            return squareModel.getPolygons();

        if (model instanceof SierpinskiModel sierpinskiModel)
            return sierpinskiModel.getPolygons();

        return null;
    }


    @Override
    public void notify(String s)
    {
        switch (s)
        {
            case Notify.START ->
            {
                this.notify(Notify.STOP);
                SLEEP_TIME = (8-depth)*10;

                switch (figure)
                {
                    case Notify.TROMINO ->  model = new TrominoModel(controller, depth);

                    case Notify.SQUARE -> model = new SquareModel(controller, depth);

                    case Notify.TRIANGLE -> model = new SierpinskiModel(controller, depth);
                }
                running = true;
            }

            case Notify.STOP ->
            {
                if (model instanceof TrominoModel trominoModel)
                    trominoModel.stopModel();

                if (model instanceof SquareModel squareModel)
                    squareModel.stopModel();

                if (model instanceof SierpinskiModel sierpinskiModel)
                    sierpinskiModel.stopModel();
            }

            case Notify.PROCESS_FINISHED -> running = false;

            case Notify.TROMINO, Notify.SQUARE, Notify.TRIANGLE -> this.figure = s;
        }
    }
}
